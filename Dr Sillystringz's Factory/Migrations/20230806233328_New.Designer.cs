// <auto-generated />
using System;
using Dr_Sillystringz_s_Factory.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dr_Sillystringz_s_Factory.Migrations
{
    [DbContext(typeof(FactoryDbContext))]
    [Migration("20230806233328_New")]
    partial class New
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity<Engineer>(b =>
            {
                b.Property(e => e.EngineerId)
                    .ValueGeneratedOnAdd();

                b.Property(e => e.Name)
                    .IsRequired();

                b.Property(e => e.Specialty)
                    .IsRequired();

                b.HasKey(e => e.EngineerId);

                b.ToTable("Engineers");
            });

            modelBuilder.Entity<Machine>(b =>
            {
                b.Property(e => e.MachineId)
                    .ValueGeneratedOnAdd();

                b.Property(e => e.Name)
                    .IsRequired();

                b.Property(e => e.Manufacturer)
                    .IsRequired();

                b.Property(e => e.InstallationDate)
                    .HasColumnType("datetime(6)"); // Use the correct data type for InstallationDate

                b.HasKey(e => e.MachineId);

                b.ToTable("Machines");
            });

            modelBuilder.Entity<EngineerMachine>(b =>
            {
                b.HasKey(em => new { em.EngineerId, em.MachineId });

                b.HasOne(em => em.Engineer)
                    .WithMany(e => e.EngineerMachines)
                    .HasForeignKey(em => em.EngineerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(em => em.Machine)
                    .WithMany(m => m.EngineerMachines)
                    .HasForeignKey(em => em.MachineId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(em => em.Engineer);
                b.Navigation(em => em.Machine);
            });

            modelBuilder.Entity<Engineer>(b =>
            {
                b.Navigation(e => e.EngineerMachines);
            });

            modelBuilder.Entity<Machine>(b =>
            {
                b.Navigation(m => m.EngineerMachines);
            });
#pragma warning restore 612, 618
        }
    }
}
